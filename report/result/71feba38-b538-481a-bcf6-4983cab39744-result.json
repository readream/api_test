{"name": "test_login[data6]", "status": "broken", "statusDetails": {"message": "TypeError: request() got an unexpected keyword argument 'parmas'", "trace": "self = <testcase.testLogin.TestLogin object at 0x0000000003F411C0>\ndata = {'cookies': '', 'headers': '{}', 'status_code': '200', '前置条件': '', ...}\n\n    @pytest.mark.parametrize(\"data\", student_xls)\n    def test_login(self, data):\n        '''学生端登陆'''\n        self.url = data[data_key.url]\n        self.parameter = json.loads(data[data_key.params])\n        self.status_code = data[data_key.code]\n        self.case_model = data[data_key.case_model]\n        self.case_id = data[data_key.case_id]\n        self.case_name = data[data_key.case_name]\n        self.method = data[data_key.method]\n        self.headers = data[data_key.headers]\n        self.headers = function.res_sub(self.headers,common.get_token())\n        self.headers = json.loads(self.headers)\n        self.expect_result = data[data_key.expect_result]\n        configHttp.set_url(self.url)\n        configHttp.set_headers(self.headers)\n        print(configHttp.set_data(self.parameter))\n        # 请求对应封装接口\n>       self.respon = configHttp.request_api(self.method)\n\ntestcase\\testLogin.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\configHttp.py:35: in request_api\n    res = requests.get(self.url, headers=self.headers, parmas=self.params, timeout=float(timeout))\nD:\\python\\lib\\site-packages\\requests\\api.py:76: in get\n    return request('get', url, params=params, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmethod = 'get', url = 'http://211.103.136.242:8064/categories/115/skus/'\nkwargs = {'allow_redirects': True, 'headers': {}, 'params': None, 'parmas': {}, ...}\nsession = <requests.sessions.Session object at 0x0000000003F4B6D0>\n\n    def request(method, url, **kwargs):\n        \"\"\"Constructs and sends a :class:`Request <Request>`.\n    \n        :param method: method for the new :class:`Request` object: ``GET``, ``OPTIONS``, ``HEAD``, ``POST``, ``PUT``, ``PATCH``, or ``DELETE``.\n        :param url: URL for the new :class:`Request` object.\n        :param params: (optional) Dictionary, list of tuples or bytes to send\n            in the query string for the :class:`Request`.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n        :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n        :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n        :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.\n            ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``\n            or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string\n            defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers\n            to add for the file.\n        :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n        :param timeout: (optional) How many seconds to wait for the server to send data\n            before giving up, as a float, or a :ref:`(connect timeout, read\n            timeout) <timeouts>` tuple.\n        :type timeout: float or tuple\n        :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.\n        :type allow_redirects: bool\n        :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n        :param verify: (optional) Either a boolean, in which case it controls whether we verify\n                the server's TLS certificate, or a string, in which case it must be a path\n                to a CA bundle to use. Defaults to ``True``.\n        :param stream: (optional) if ``False``, the response content will be immediately downloaded.\n        :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n        :return: :class:`Response <Response>` object\n        :rtype: requests.Response\n    \n        Usage::\n    \n          >>> import requests\n          >>> req = requests.request('GET', 'https://httpbin.org/get')\n          >>> req\n          <Response [200]>\n        \"\"\"\n    \n        # By using the 'with' statement we are sure the session is closed, thus we\n        # avoid leaving sockets open which can trigger a ResourceWarning in some\n        # cases, and look like a memory leak in others.\n        with sessions.Session() as session:\n>           return session.request(method=method, url=url, **kwargs)\nE           TypeError: request() got an unexpected keyword argument 'parmas'\n\nD:\\python\\lib\\site-packages\\requests\\api.py:61: TypeError"}, "description": "学生端登陆", "parameters": [{"name": "data", "value": "{'用例ID': 'cate_1', '模块': '商品列表数据', '接口名称': '商品列表数据正确', '请求URL': '/categories/115/skus/', '前置条件': '', '请求类型': 'get', '请求参数类型': 'json', '请求参数': '{\"page\":\"1\",\\n \"page_size\": \"10\",\\n \"ordering\": \"create_time\"}', '预期结果': '', '实际结果': '', '备注': '', '是否运行': '', 'headers': '{}', 'cookies': '', 'status_code': '200', '数据库验证': ''}"}], "start": 1598926035691, "stop": 1598926036514, "uuid": "36ec4aad-a0b4-4473-b8cf-820fe1510f37", "historyId": "2be3c56c1b5dde8b366ff9dde4920100", "testCaseId": "9a22eb6dd1f861c809eb24e8910b9d6a", "fullName": "testcase.testLogin.TestLogin#test_login", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "testLogin"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "INNOVAT0084"}, {"name": "thread", "value": "10852-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.testLogin"}]}